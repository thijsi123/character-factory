user_input,output,flag,username,timestamp
"'main.py
from imagecaption import get_sorted_general_strings  # Adjusted import
with gr.Blocks() as webui:
    gr.Markdown(""# Character Factory WebUI"")
    gr.Markdown(""## OOBABOOGA MODE"")
    with gr.Row():
        url_input = gr.Textbox(label=""Enter URL"", value=""http://127.0.0.1:5000"")
        submit_button = gr.Button(""Set URL"")
    output = gr.Textbox(label=""URL Status"")

    submit_button.click(
        process_url, inputs=url_input, outputs=output
    )
    with gr.Tab(""Edit character""):
        gr.Markdown(
            ""## Protip: If you want to generate the entire character using LLM and Stable Diffusion, start from the top to bottom""
            # nopep8
        )
        topic = gr.Textbox(
            placeholder=""Topic: The topic for character generation (e.g., Fantasy, Anime, etc.)"",  # nopep8
            label=""topic"",
        )

        gender = gr.Textbox(
            placeholder=""Gender: Gender of the character"", label=""gender""
        )

        with gr.Column():
            with gr.Row():
                name = gr.Textbox(placeholder=""character name"", label=""name"")
                surname_checkbox = gr.Checkbox(label=""Add Surname"", value=False)
                name_button = gr.Button(""Generate character name with LLM"")
                name_button.click(
                    generate_character_name,
                    inputs=[topic, gender, name, surname_checkbox],
                    outputs=name
                )
            with gr.Row():
                summary = gr.Textbox(
                    placeholder=""character summary"",
                    label=""summary""
                )
                summary_button = gr.Button(""Generate character summary with LLM"")  # nopep8
                summary_button.click(
                    generate_character_summary,
                    inputs=[name, topic, gender],
                    outputs=summary,
                )
            with gr.Row():
                personality = gr.Textbox(
                    placeholder=""character personality"", label=""personality""
                )
                personality_button = gr.Button(
                    ""Generate character personality with LLM""
                )
                personality_button.click(
                    generate_character_personality,
                    inputs=[name, summary, topic],
                    outputs=personality,
                )
            with gr.Row():
                scenario = gr.Textbox(
                    placeholder=""character scenario"",
                    label=""scenario""
                )
                scenario_button = gr.Button(""Generate character scenario with LLM"")  # nopep8
                scenario_button.click(
                    generate_character_scenario,
                    inputs=[summary, personality, topic],
                    outputs=scenario,
                )
            with gr.Row():
                greeting_message = gr.Textbox(
                    placeholder=""character greeting message"",
                    label=""greeting message""
                )

                # Checkbox to switch between functions for greeting message
                switch_greeting_function_checkbox = gr.Checkbox(label=""Use alternate greeting message generation"",
                                                                value=False)

                greeting_message_button = gr.Button(
                    ""Generate character greeting message with LLM""
                )


                # Function to handle greeting message button click
                def handle_greeting_message_button_click(
                        character_name, character_summary, character_personality, topic, use_alternate
                ):
                    if use_alternate:
                        return generate_character_greeting_message2(character_name, character_summary,
                                                                    character_personality, topic)
                    else:
                        return generate_character_greeting_message(character_name, character_summary,
                                                                   character_personality, topic)


                greeting_message_button.click(
                    handle_greeting_message_button_click,
                    inputs=[name, summary, personality, topic, switch_greeting_function_checkbox],
                    outputs=greeting_message,
                )
            with gr.Row():
                with gr.Column():
                    # Checkbox to switch between functions
                    switch_function_checkbox = gr.Checkbox(label=""Use alternate example message generation"",
                                                           value=False)

                    example_messages = gr.Textbox(placeholder=""character example messages"", label=""example messages"")
                example_messages_button = gr.Button(""Generate character example messages with LLM"")


                # Function to handle button click
                def handle_example_messages_button_click(
                        character_name, character_summary, character_personality, topic, use_alternate
                ):
                    if use_alternate:
                        return generate_example_messages2(character_name, character_summary, character_personality,
                                                          topic)
                    else:
                        return generate_example_messages(character_name, character_summary, character_personality,
                                                         topic)


                example_messages_button.click(
                    handle_example_messages_button_click,
                    inputs=[name, summary, personality, topic, switch_function_checkbox],
                    outputs=example_messages,
                )
            '''gender = gr.Textbox(
                placeholder=""Gender: Gender of the character"", label=""gender""
            )'''
            with gr.Row():
                with gr.Column():
                    image_input = gr.Image(interactive=True, label=""Character Image"", width=512, height=768)
                    # Button to process the uploaded image
                    process_image_button = gr.Button(""Process Uploaded Image"")

                    # Function to handle the uploaded image
                process_image_button.click(
                    process_uploaded_image,  # Your function to handle the image
                    inputs=[image_input],
                    outputs=[image_input]  # You can update the same image display with the processed image
                )

                with gr.Column():
                    gender = gender
                    negative_prompt = gr.Textbox(
                        placeholder=""negative prompt for stable diffusion (optional)"",  # nopep8
                        label=""negative prompt"",
                    )
                    avatar_prompt = gr.Textbox(
                        placeholder=""prompt for generating character avatar (If not provided, LLM will generate prompt from character description)"",
                        # nopep8
                        label=""stable diffusion prompt"",
                    )
                    generate_tags_button = gr.Button(""Generate Tags and Set Prompt"")

                    generate_tags_button.click(
                        get_sorted_general_strings,
                        inputs=[image_input],
                        outputs=[avatar_prompt]
                    )

                    # Function to handle the generation of tags and setting them as prompt
                    def generate_tags_and_set_prompt(image):
                        # Assuming 'get_tags_for_image' returns a string of tags
                        sorted_general_strings = get_sorted_general_strings(image)
                        return sorted_general_strings

                    # Link the button click to the action
                    generate_tags_button.click(
                        generate_tags_and_set_prompt,
                        inputs=[image_input],
                        outputs=[avatar_prompt]
                    )
                    avatar_button = gr.Button(
                        ""Generate avatar with stable diffusion (set character name first)""  # nopep8
                    )
                    potential_nsfw_checkbox = gr.Checkbox(
                        label=""Block potential NSFW image (Upon detection of this content, a black image will be returned)"",
                        # nopep8
                        value=True,
                        interactive=True,
                    )
                    avatar_button.click(
                        generate_character_avatar,
                        inputs=[
                            name,
                            summary,
                            topic,
                            negative_prompt,
                            avatar_prompt,
                            potential_nsfw_checkbox,
                            gender,
                        ],
                        outputs=image_input,
                    )
    with gr.Tab(""Import character""):
        with gr.Column():
            with gr.Row():
                import_card_input = gr.File(
                    label=""Upload character card file"", file_types=["".png""]
                )
                import_json_input = gr.File(
                    label=""Upload JSON file"", file_types=["".json""]
                )
            with gr.Row():
                import_card_button = gr.Button(""Import character from character card"")  # nopep8
                import_json_button = gr.Button(""Import character from json"")

            import_card_button.click(
                import_character_card,
                inputs=[import_card_input],
                outputs=[
                    name,
                    summary,
                    personality,
                    scenario,
                    greeting_message,
                    example_messages,
                ],
            )
            import_json_button.click(
                import_character_json,
                inputs=[import_json_input],
                outputs=[
                    name,
                    summary,
                    personality,
                    scenario,
                    greeting_message,
                    example_messages,
                ],
            )
    with gr.Tab(""Export character""):
        with gr.Column():
            with gr.Row():
                export_image = gr.Image(width=512, height=512)
                export_json_textbox = gr.JSON()

            with gr.Row():
                export_card_button = gr.Button(""Export as character card"")
                export_json_button = gr.Button(""Export as JSON"")

                export_card_button.click(
                    export_character_card,
                    inputs=[
                        name,
                        summary,
                        personality,
                        scenario,
                        greeting_message,
                        example_messages,
                    ],
                    outputs=export_image,
                )
                export_json_button.click(
                    export_as_json,
                    inputs=[
                        name,
                        summary,
                        personality,
                        scenario,
                        greeting_message,
                        example_messages,
                    ],
                    outputs=export_json_textbox,
                )
    gr.HTML(""""""<div style='text-align: center; font-size: 20px;'>
        <p>
          <a style=""text-decoration: none; color: inherit;"" href=""https://github.com/thijsi123/character-factory"">Character Factory</a> 
          by 
          <a style=""text-decoration: none; color: inherit;"" href=""https://github.com/Hukasx0"">Hubert ""Hukasx0"" Kasperek</a>
          and forked by
          <a style=""text-decoration: none; color: inherit;"" href=""https://github.com/thijsi123"">Thijs</a>
        </p>
      </div>"""""")  # nopep8

safety_checker_sd = sd.safety_checker

webui.launch(debug=True)

imagecaption.py

import os
import numpy as np
import onnxruntime as rt
import pandas as pd
from PIL import Image
import huggingface_hub
import argparse


def parse_args():
    parser = argparse.ArgumentParser(description=""Process and tag an image."")
    parser.add_argument('image_path', type=str, help=""Path to the image file."")
    # Other arguments...
    return parser.parse_args()


# Constants (adjust these paths and model repository names as needed)
HF_TOKEN = ""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""
MODEL_REPO = ""SmilingWolf/wd-swinv2-tagger-v3""  # Example model repository
MODEL_FILENAME = ""model.onnx""
LABEL_FILENAME = ""selected_tags.csv""
'''IMAGE_PATH = ""image.png""'''  # Image to process, testing purposes


def download_model(model_repo, hf_token):
    csv_path = huggingface_hub.hf_hub_download(
        model_repo, LABEL_FILENAME, use_auth_token=hf_token)
    model_path = huggingface_hub.hf_hub_download(
        model_repo, MODEL_FILENAME, use_auth_token=hf_token)
    return csv_path, model_path


def load_model(model_repo, hf_token):
    csv_path, model_path = download_model(model_repo, hf_token)
    tags_df = pd.read_csv(csv_path)
    model = rt.InferenceSession(model_path)
    _, height, width, _ = model.get_inputs()[0].shape
    return model, tags_df, height


def prepare_image(image_array, target_size):
    image = Image.fromarray(image_array)
    image = image.convert(""RGB"")
    image = image.resize((target_size, target_size), Image.BICUBIC)
    image_array = np.array(image, dtype=np.float32)
    image_array = image_array[:, :, ::-1]  # Convert RGB to BGR if needed; depends on model
    image_array = np.expand_dims(image_array, axis=0)  # Add batch dimension
    return image_array


def predict(model, image_array):
    input_name = model.get_inputs()[0].name
    preds = model.run(None, {input_name: image_array})[0]
    return preds


def get_sorted_general_strings(image_path, model_repo=MODEL_REPO, hf_token=HF_TOKEN):
    model, tags_df, target_size = load_model(model_repo, hf_token)
    image_array = prepare_image(image_path, target_size)
    preds = predict(model, image_array)
    tags = list(zip(tags_df[""name""], preds[0]))
    sorted_tags = sorted(tags, key=lambda x: x[1], reverse=True)
    sorted_general_strings = "", "".join([tag for tag, score in sorted_tags if score > 0.35])
    return sorted_general_strings


if __name__ == ""__main__"":
    # Example usage
    args = parse_args()
    IMAGE_PATH = args.image_path  # Use the provided image path
    sorted_general_strings = get_sorted_general_strings(IMAGE_PATH, MODEL_REPO, HF_TOKEN)
    print(""Generated Tags:"", sorted_general_strings)
    # Here you can pass sorted_general_strings to another process or script as needed


the generate_tags_and_set_prompt button doesn't work correctly","'There seems to be an issue with the `generate_tags_button` event listener in your code. It is currently set to call `get_sorted_general_strings`, but it should call `generate_tags_and_set_prompt`. Here's the corrected version:


```python
generate_tags_button.click(
    generate_tags_and_set_prompt,
    inputs=[image_input],
    outputs=[avatar_prompt]
)
```",,,2024-03-16 18:49:39.732759
