import aicharl as aichar
from PIL import Image
import os
import logging
import gradio as gr

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
processed_image_path = None  # <- Add this

# If you need this to find an image path for a default card image or reference
def find_image_path():
    possible_paths = [
        "./app2/image.png",
        "./image.png"
    ]
    for path in possible_paths:
        if os.path.exists(path):
            return path
    return None

image_path = find_image_path()
if image_path:
    print(f"Image found at: {image_path}")
else:
    print("Image not found in any of the specified locations.")

# ------------- IMPORT LOGIC ------------- #

def import_character_json(json_path):
    """
    Imports a character from a JSON file using aicharl.load_character_json_file().
    """
    if json_path is not None:
        character = aichar.load_character_json_file(json_path)
        if character.name:
            gr.Info("Character data loaded successfully")

            # Return all necessary fields to fill the UI textboxes
            return (
                character.name,
                character.summary,
                character.personality,
                character.scenario,
                character.first_greeting_message,
                character.greeting_message,
                character.example_messages,
                *character.alternate_greetings
            )
        raise ValueError(
            "Error when importing character data from a JSON file. Validate the file and try again."
        )

def import_character_card(card_path):
    """
    Imports a character from a PNG card using aichar.load_character_card_file().
    """
    if card_path is not None:
        character = aichar.load_character_card_file(card_path)
        if character.name:
            gr.Info("Character data loaded successfully")
            return (
                character.name,
                character.summary,
                character.personality,
                character.scenario,
                character.first_greeting_message,
                character.greeting_message,
                character.example_messages,
                *character.alternate_greetings
            )
        raise ValueError(
            "Error when importing character data from a character card file. Check correctness and try again."
        )

# ------------- EXPORT LOGIC ------------- #

def export_as_json(
    name,               # 1
    summary,            # 2
    personality,        # 3
    scenario,           # 4
    first_greeting_message,  # 5
    greeting_message,        # 6
    example_messages,        # 7
    *alternate_greetings     # 8+
):
    """
    Creates a character from UI fields and returns the JSON string (neutral format).
    Make sure the parameter order matches your UI's .click(inputs=[...]).
    """
    alt_greetings_list = [g for g in alternate_greetings if g.strip()]

    # Create the character
    character = aichar.create_character(
        name=name,
        summary=summary,
        personality=personality,
        scenario=scenario,
        first_greeting_message=first_greeting_message,
        greeting_message=greeting_message,
        example_messages=example_messages,
        image_path=None,  # or image_path if you want a default
        alternate_greetings=alt_greetings_list,
    )

    # Export to "neutral" JSON
    return character.export_neutral_json()


def export_character_card(
    name,                   # 1
    summary,                # 2
    personality,            # 3
    scenario,               # 4
    first_greeting_message, # 5
    greeting_message,       # 6
    example_messages,       # 7
    *alternate_greetings
):
    """
    Creates a character from UI fields and exports as a character card PNG.
    """
    global processed_image_path

    base_path = f"characters/{name.replace(' ', '_')}/"
    os.makedirs(base_path, exist_ok=True)

    # Decide which image to use
    if processed_image_path and os.path.exists(processed_image_path):
        local_image_path = processed_image_path
    else:
        local_image_path = "characters/uploaded_character/uploaded_character.png"
        if not os.path.exists(local_image_path):
            # Create a default 256x256 if it doesn't exist
            img = Image.new('RGB', (256, 256), color=(73, 109, 137))
            os.makedirs("characters/uploaded_character", exist_ok=True)
            img.save(local_image_path)

    # Filter alt greetings
    alt_greetings_list = [g for g in alternate_greetings if g.strip()]

    # Build the character
    character = aichar.create_character(
        name=name,
        summary=summary,
        personality=personality,
        scenario=scenario,
        first_greeting_message=first_greeting_message,
        greeting_message=greeting_message,
        example_messages=example_messages,
        image_path=local_image_path,
        alternate_greetings=alt_greetings_list,
    )

    # Export
    card_path = f"{base_path}{name.replace(' ', '_')}.card.png"
    character.export_neutral_card_file(card_path)

    if os.path.exists(card_path):
        return card_path  # or return Image.open(card_path)
    else:
        return None
